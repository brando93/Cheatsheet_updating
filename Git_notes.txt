

                    GIT NOTES - BRANDON RODRIGUEZ

Remote Repositories:

-Setting up SSH Credentials (steps):

#In terminal

Install Git:

$ sudo yum list git
Installed Packages
git.x86_64    1.8.3.1-14.el7_5   @RHEL-75-x86_64-updates
$ sudo yum install git git.x86_64

$ cd ~
$ ssh-keygen -t rsa -C "<email>"
Press enter
Enter Passphrase
$ cat  ~/.ssh/<nombre de llave creada>

#In Github web profile

Go to Profile>SSH and GPG Keys
Clic in New SSH key
Enter Title and copy out from cat  ~/.ssh/<nombre de llave creada> and paste it

Go to terminal:

mkdir ~/Git_Proyect
cd ~/Git_Proyect
git clone <SSH URL or HTTPS URL> (depends on the configuration made, in this case select ssh)


##################
Conceptos:

-Tipos de stages:

**File Status Life Cycle**

Untracked:

Es el primer status cuando se crea un archivo en nuestra carpeta git, en este file Status git no captara ningun cambio que se haga a este
Algunas archivos queremos dejarlos como untracked ejemplos son: settings files, tmp files.

Tracked:

Cualquier cambio sera notado por git cuando un archivo esta en este estado.


Modified:

Cuando un archivo es modificado, git entiende que este archivo debe ser movido a la siguiente fase dado que fue modificado

Staged:

En este se encuentran los commits. Cuando se sube el archivo y queremos que sea revisado por los demas.

Detached HEAD = means we cannot make changes into
repository however we can look around

.gitignore file= is usefull when you do not want
git to reconize every specific file such as .swp so
you add into .gitignore file the following as example:
*.swp : in case you want all .swp files are ignored by git

-Fetch: Is the action of getting changes from remote repository to local repository

-Push: Is the action of make changes from local repository to remote repository

-Origin: default label from remote repository



_____________________________________________________________________________________

Commands:

git init: verifica que el folder este vacio e inicia git
git status: shows current stage of files
git config user.name: configure your user settings
git config user.email:configure your email settings
git config --global user.name: guarda la configuracion para cada sesion de git
git add "<file name>": cambiar de stage el file de untracked - tracked - modified
git add . :cambiar de stage el file
git commit -m "<name of the commit>": toma un snapshot de los cambios hecos, agrega los cambios hechos
git log: shows all logs
git config core.pager cat
git config core.pager less
git log -2
git log --oneline
git log --oneline -2
git log --before="2017-03-02": shows logs from to specific time
git log --after="2017-03-01": shows logs from to specific time
git log --since=2 days ago": shows logs from to specific time
git log --after="one week ago": shows logs fcd rom to specific time
git log --author="Jorge": shows logs made by Jorge
git help log
git checkout <hash id>
git checkout master
git rm <name of file>
git diff <hash Commits>
git diff <hash Commits>^
git diff <hash commit>..<hash commit>
git --amend
git config core.editor "atom --wait"
git commit --amend
git reset <hash id> --hard : goes back to that commit
git reset HEAD <file name>
git checkout -- <file name>
git reset HEAD --hard
git reset HEAD^ --hard
git branch
git checkout <branch name>
git merge <master>
git branch -d <name branch>
git checkout -b <name of branch to create and switch to>
git rebase <master> : update current branch with specified
git rebase -i <master or branch name>: shows all commits are going to be rebase into branch selected. You'll have to choose one option:
Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but combine into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell

git rebase -i HEAD~<quantity of commits to show>: it will allow you to change, modify or deletes commits in current branch

Taggin:

Es utilizado para por hacer referencias importantes, ejemplo hacer referencia a la version en que se esta trabajando o la que se ha terminado de usar etc...

$ git --version
git version 1.8.3.1
$ git tag version-1.8.3.1
$ git tag
version-1.8.3.1

git checkout version-1.8.3.1: it will let you got to reposity or look around if you are in detached head state


git push origin master: allows to send our local repo changes to the remote repo
git fetch origin: allows to sync our local repo with remote repo but will not see changes reflected locally
git merge origin/master: i will make changes from remote repo to your local repository
git pull origin: i will fetch and merge at once. I will make sync (fetch) and upde our local repo with the new one (merge)
git push -u origin <different branch>: it will allow to push from a different branch
git fetch --all: it will get all changes even from different branches
git fetch --all --prune: it's used when someone deleted a branch. If we use git fetch --all it will not work.
